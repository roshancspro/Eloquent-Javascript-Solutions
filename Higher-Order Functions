Write two functions, every and some, that behave like these methods,
except that they take the array as their first argument rather than being a method.

// Your code here.
var some = function(arr,method){
  for(var i = 0 ; i < arr.length; i++){
    //console.log(method(arr[i]));
    if(method(arr[i]) == true)
      return true;
  }
  return false;
}

var every = function(arr,method){
  for(var i = 0 ; i < arr.length; i++){
    //console.log(method(arr[i]));
    if(method(arr[i]) == false)
      return false;
  }
  return true;
}

console.log(every([NaN, NaN, NaN], isNaN));
// → true
console.log(every([NaN, NaN, 4], isNaN));
// → false
console.log(some([NaN, 3, 4], isNaN));
// → true
console.log(some([2, 3, 4], isNaN));
// → false

========================================================================================

Mother-child age difference:

function average(array) {
  function plus(a, b) { return a + b; }
  return array.reduce(plus) / array.length;
}

var byName = {};
ancestry.forEach(function(person) {
  byName[person.name] = person;
});

// Your code here.
var hasKnownMother = function(person){
  //return byName[person.name].mother !== null;
  //console.log("name "+person.name);
  var mother = byName[person.name].mother;
  //console.log(mother);
  if( mother !== null )
	  return byName[mother] !== undefined ;
  
}

var ageDifference = function(person){
  //var mother = byName[person.mother];
  //console.log(person.name + " " +person.born);
  //console.log(byName[person.mother].name + " " +byName[person.mother].born);
  return person.born - byName[person.mother].born;
}

console.log(average(ancestry.filter(hasKnownMother).map(ageDifference)));
//console.log(ancestry.filter(hasKnownMother).map(ageDifference));


========================================================================================
Flattening
Use the reduce method in combination with the concat method to
“flatten” an array of arrays into a single array that has all the elements of the input arrays.

var arrays = [[1, 2, 3], [4, 5], [6]];
// Your code here.
var mergeArr = function(arr1,arr2){
  return arr1.concat(arr2);
}
console.log(arrays.reduce(mergeArr));
// → [1, 2, 3, 4, 5, 6]

========================================================================================

Historical life expectancy

function average(array) {
  function plus(a, b) { return a + b; }
  return array.reduce(plus) / array.length;
}

// Your code here.
var centuryObj = {};

var getCenturyforPersons = function(person) {
  var age = person.died - person.born;
  var century = Math.ceil(person.died / 100);
  if (centuryObj.hasOwnProperty(century)){
      var val = [];
   	  val = centuryObj[century];
      val.push(age);
      centuryObj[century] = val;
      }
	else{
      var val = [];
      val.push(age);
      centuryObj[century] = val;
    }
  //console.log(centuryObj);
}

ancestry.forEach(getCenturyforPersons);

for(var century in centuryObj){
  if(centuryObj.hasOwnProperty(century)){
    //numb = numb.toFixed(2);
     console.log(century+": "+average(centuryObj[century]).toFixed(1));
     }
}



// → 16: 43.5
//   17: 51.2
//   18: 52.8
//   19: 54.8
//   20: 84.7
//   21: 94
