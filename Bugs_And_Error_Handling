====================================================================================================
Retry
Say you have a function primitiveMultiply that, in 50 percent of cases,
multiplies two numbers, and in the other 50 percent, raises an exception of type
MultiplicatorUnitFailure. Write a function that wraps this clunky function and 
just keeps trying until a call succeeds, after which it returns the result.

Make sure you handle only the exceptions you are trying to handle.

function MultiplicatorUnitFailure() {
}

MultiplicatorUnitFailure.prototype = Object.create(Error.prototype);

function primitiveMultiply(a, b) {
  if (Math.random() < 0.5){
    return a * b;
  }else
    throw new MultiplicatorUnitFailure();
}

function reliableMultiply(a, b) {
  // Your code here.
  try{
    for(;;){
      var result = primitiveMultiply(a,b);
      if(!isNaN(result))
        return result;
    }
  }catch(e){
    if(!e instanceof MultiplicatorUnitFailure)
      throw e;
  }
  
}

console.log(reliableMultiply(8, 8));
// → 64

====================================================================================================
Write a function called withBoxUnlocked that takes a function value as argument, 
unlocks the box, runs the function, and then ensures that the box is locked again before returning, 
regardless of whether the argument function returned normally or threw an exception.

var box = {
  locked: true,
  unlock: function() { this.locked = false; },
  lock: function() { this.locked = true;  },
  _content: [],
  get content() {
    if (this.locked) throw new Error("Locked!");
    return this._content;
  }
};

function withBoxUnlocked(body) {
  // Your code here.
  var isLocked = this.box.locked;
  try{
    if(isLocked){
      this.box.unlock();
    }
    console.log(body.toString());
    body();
  }catch(e){
    
  }finally{
    if(isLocked)
      this.box.lock();
  }
}

withBoxUnlocked(function() {
  box.content.push("gold piece");
});

try {
  withBoxUnlocked(function() {
    throw new Error("Pirates on the horizon! Abort!");
  });
} catch (e) {
  console.log("Error raised:", e);
}
console.log(box.locked);
// → true
=======================================================================================================
