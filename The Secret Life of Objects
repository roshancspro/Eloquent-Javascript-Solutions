==========================================================================================
A vector type
==========================================================================================

Write a constructor Vector that represents a vector in two-dimensional space.
It takes x and y parameters (numbers), which it should save to properties of the same name.

Give the Vector prototype two methods, plus and minus, that take another vector as a parameter 
and return a new vector that has the sum or difference of the two vectors’ 
(the one in this and the parameter) x and y values.

Add a getter property length to the prototype that computes the length of the vector—that 
is, the distance of the point (x, y) from the origin (0, 0).

// Your code here.
var Vector = function(x,y){
  this.x = x;
  this.y = y;
}

Object.defineProperty(Vector.prototype,"length",{
    get: function() { return Math.sqrt(this.x*this.x + this.y*this.y); },
    //set: function(value) { _discount = value; if(_discount>80) _discount = 80; }
  });

Vector.prototype.plus = function(vector){
  return new Vector(this.x+vector.x, this.y+vector.y);
}
Vector.prototype.minus = function(vector){
  return new Vector(this.x-vector.x, this.y-vector.y);
}

Vector.prototype.length = Math.sqrt(Vector.x) + Math.sqrt(Vector.y);

//console.log(new Vector(1, 2).plus(new Vector(2, 3)));
// → Vector{x: 3, y: 5}
console.log(new Vector(1, 2).minus(new Vector(2, 3)));
// → Vector{x: -1, y: -1}
console.log(new Vector(3, 4).length);
// → 5
==================================================================================================
Sequence interface
Design an interface that abstracts iteration over a collection of values.

// Your code here.
function ArraySeq(arr){
  this.arr = arr;
  this.counter = 0;
}
ArraySeq.prototype.hasNext = function(){
  return this.counter < this.arr.length;
}
ArraySeq.prototype.next = function(){
  return this.arr[this.counter++];
}

function RangeSeq(start,end){
  this.start = start;
  this.end = end;
  this.counter = start;
}

RangeSeq.prototype.hasNext = function(){
  return this.counter <= this.end;
}

RangeSeq.prototype.next = function(){
  var currVal = this.counter;
  this.counter += 1;
  return currVal;
}



var logFive = function(sequenceObj){
  while(sequenceObj.hasNext()){
        console.log(sequenceObj.next());
   }
} 

logFive(new ArraySeq([1, 2,4,6,7]));
// → 1
// → 2
//logFive(new RangeSeq(100, 102));
logFive(new RangeSeq(100, 105));
// → 100
// → 101
// → 102
// → 103
// → 104

===============================================================================================================
